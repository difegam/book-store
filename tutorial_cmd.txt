poetry new book-store
poetry run python -m pip install --upgrade pip
poetry add django python-dotenv
poetry add yapf -D
poetry run django-admin startproject book_store .
poetry run py manage.py startapp book_outlet
poetry run python manage.py runserver


poetry run py manage.py makemigrations
poetry run py manage.py migrate

poetry run py manage.py shell
>>> from book_outlet.models import Book
>>> harry_potter = Book(title="Harry Potter 1", rating=5)
>>> harry_potter
Book(self.title='Harry Potter 1', self.rating=5)
>>> harry_potter.title
'Harry Potter 1'
>>> harry_potter.save()

>>> lotr = Book(title="Lord of the Rings", rating=4)
>>> lotr.save()

>>> Book.objects.all()
<QuerySet [Book(self.title='Harry Potter 1', self.rating=5), Book(self.title='Lord of the Rings', self.rating=4)]>

In [18]: harry_potter.delete()
Out[18]: (1, {'book_outlet.Book': 1})

In [20]: Book.objects.create(title='Harry Potter 1', rating=5, author="J.K. Rowlling", is_bestselling=True)
Out[20]: Book(title='Harry Potter 1', rating=5), author=J.K. Rowlling, is_bestselling=True


books = [Book(title='Book 1', author='Author 1', rating=5, is_bestselling=True), 
 Book(title='Book 2', author='Author 2', rating=5, is_bestselling=True), 
 Book(title='Book 3', author='Author 3', rating=1, is_bestselling=False), 
 Book(title='Book 4', author='Author 4', rating=4, is_bestselling=True),
 Book(title='Book 5', author='Author 5', rating=4, is_bestselling=False),
 Book(title='Book 6', author='Author 6', rating=1, is_bestselling=True), 
 Book(title='Book 7', author='Author 7', rating=3, is_bestselling=True), 
 Book(title='Book 8', author='Author 8', rating=5, is_bestselling=True), 
 Book(title='Book 9', author='Author 9', rating=3, is_bestselling=False), 
 Book(title='Book 10', author='Author 10', rating=4, is_bestselling=True)
 ]
Book.objects.bulk_create(books)

# A value
In [2]: Book.objects.get(title="My Book")
Out[2]: Book(title="My Book", rating=5, author="dgamboa", is_bestselling=True)

In [3]: Book.objects.get(id=4)
Out[3]: Book(title="My Book", rating=5, author="dgamboa", is_bestselling=True)

In [13]: Book.objects.get(pk=2)
Out[13]: Book(title="Lord of the Rings", rating=4, author="J.R.R. Tolkien", is_bestselling=True)


# List of values
In [7]: Book.objects.filter(rating=3)
Out[7]: <QuerySet [Book(title="My Book 2", rating=3, author="dgamboa", is_bestselling=False), Book(title="Book 7", rating=3, author="Author 7", is_bestselling=True), Book(title="Book 9", rating=3, author="Author 9", is_bestselling=False)]>

In [8]: Book.objects.filter(rating=3, author="dgamboa")
Out[8]: <QuerySet [Book(title="My Book 2", rating=3, author="dgamboa", is_bestselling=False)]>

# field lookup reference
Book.objects.filter(rating__lt=3)
Out[9]: <QuerySet [Book(title="Some Random Book", rating=1, author="Random Dude", is_bestselling=False), Book(title="Book 3", rating=1, author="Author 3", is_bestselling=False), Book(title="Book 6", rating=1, author="Author 6", is_bestselling=True)]>

In [11]: Book.objects.filter(rating__lt=2, title__contains="Random")
Out[11]: <QuerySet [Book(title="Some Random Book", rating=1, author="Random Dude", is_bestselling=False)]>


# OR
from django.db.models import Q
Book.objects.filter(Q(rating__gt=4) | Q(is_bestselling=True))

# OR & AND (Q and | for OR condition) ( , for an AND contition)
In [21]: Book.objects.filter(Q(rating__gt=4) | Q(is_bestselling=False), Q(author="dgamboa"))
Out[21]: <QuerySet [Book(title="My Book", rating=5, author="dgamboa", is_bestselling=True), Book(title="My Book 2", rating=3, author="dgamboa", is_bestselling=False)]>

# Save a filter QuerySet and filter it again
In [22]: bestsellers = Book.objects.filter(is_bestselling=True)
In [23]: amazing_bestsellers = bestsellers.filter(rating__gt=4)
In [24]: print(amazing_bestsellers)
<QuerySet [Book(title="Harry Potter 1", rating=5, author="J.K. Rowlling", is_bestselling=True), Book(title="My Book", rating=5, author="dgamboa", is_bestselling=True), Book(title="Book 1", rating=5, author="Author 1", is_bestselling=True), Book(title="Book 2", rating=5, author="Author 2", is_bestselling=True), Book(title="Book 8", rating=5, author="Author 8", is_bestselling=True)]>

# Admin	
poetry run python manage.py createsuperuser
Username (leave blank to use 'admin-user'): 
Email address: admin-user@gmail.com
Password: 
Password (again):
Superuser created successfully.


# Relationships
# Remove all books - 
In [1]: from book_outlet.models import Book
In [2]: Book.objects.all().delete()
Out[2]: (15, {'book_outlet.Book': 15})

from book_outlet.models import Book, Author
In [4]: eric = Author(first_name="Eric", last_name="Matthes")
   ...: mark = Author(first_name="Mark", last_name="Lutz")
   
In [5]: eric.save()
In [6]: mark.save()

In [9]: lp = Book(title="Learning Python", author=mark, rating=1, slug="learning-python", is_bestselling=True)
In [11]: pcc = Book(title="Python Crash Course", author=eric, rating=3, slug="python-crash-course", is_bestselling=False)

In [12]: lp.save()
In [13]: pcc.save()

In [17]: Book.objects.filter(title__contains="python")
Out[17]: <QuerySet [Book(title="Learning Python", rating=1, author="Mark Lutz", is_bestselling=True, slug="learning-python"), 
Book(title="Python Crash Course", rating=3, author="Eric Matthes", is_bestselling=False, slug="python-crash-course")]>

In [18]: book_lp, book_pcc = Book.objects.filter(title__contains="python")

In [30]: book_pcc.author, book_lp.author
Out[30]:
(Author(first_name="Eric", last_name="Matthes"),
 Author(first_name="Mark", last_name="Lutz"))

In [32]: book_pcc.author.first_name, book_lp.author.first_name
Out[32]: ('Eric', 'Mark')

#Cross Model Queries
In [33]: books_by_author = Book.objects.filter(author__last_name="Lutz")
In [34]: books_by_author
Out[34]: <QuerySet [Book(title="Learning Python", rating=1, author="Mark Lutz", is_bestselling=True, slug="learning-python")]>

# Get all books from an author 
In [35]: mark =Author.objects.get(last_name="Lutz")
In [37]: mark.book_set.all()  # By default this field is created by Django 
Out[37]: <QuerySet [Book(title="Learning Python", rating=1, author="Mark Lutz", is_bestselling=True, slug="learning-python")]>


# Rename book_set for books. Check Books.author field definition in models `related_name="books"`
In [1]: from book_outlet.models import Book, Author

In [2]: mark =Author.objects.get(last_name="Lutz")
In [3]: mark.book_set.all() #! >> AttributeError: 'Author' object has no attribute 'book_set' 

In [4]: mark.books.all()
Out[4]: <QuerySet [Book(title="Learning Python", rating=1, author="Mark Lutz", is_bestselling=True, slug="learning-python")]>

In [5]: mark.books.get(title="Learning Python")
Out[5]: Book(title="Learning Python", rating=1, author="Mark Lutz", is_bestselling=True, slug="learning-python")













